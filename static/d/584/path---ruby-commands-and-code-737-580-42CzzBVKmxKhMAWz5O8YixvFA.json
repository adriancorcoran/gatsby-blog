{"data":{"markdownRemark":{"html":"<h1>Ruby: Commands &#x26; Code</h1>\n<h1>Basics</h1>\n<h2>Objects</h2>\n<p>Everything is an Object (well, 99.9%)!</p>\n<p><strong><em>obj.class</em></strong>\t\tWhat’s this class? </p>\n<p><strong><em>obj.superclass</em></strong>\t\tHow about inherited class?</p>\n<p><strong><em>obj.ancestors</em></strong>\t\tCheck out the family tree, shall we?</p>\n<p>Variables</p>\n<p><strong><em>var</em></strong> \t\tLocal Variable</p>\n<p><strong><em>$var</em></strong>\t\tGlobal Variable</p>\n<p><strong><em>@var</em></strong>\t\tInstance variable (OBJ)</p>\n<p><strong><em>@@var</em></strong>\tClass variable</p>\n<p><strong><em>MY</em>VAR_</strong>\tconstant, of course.</p>\n<h2>Blocks</h2>\n<p>Blocks are simple \"blocks of code\"’ that can be called and sent code/variables to execute within the block. Use the “yield” within the block to use the calling source code/variables</p>\n<pre><code>def test\n</code></pre>\n<p>   puts \"You are Here\"</p>\n<p>   yield</p>\n<p>   puts \"Now you’re There!\"</p>\n<p>   yield</p>\n<p>end</p>\n<p>test {puts \"Where?\"}</p>\n<p>Output:</p>\n<p>You are Here</p>\n<p>Where?</p>\n<p>Now you’re There!</p>\n<p>Where?</p>\n<h2>Methods</h2>\n<p>All methods will return something, whether you like it or not!</p>\n<p>Special Method Stuff:</p>\n<p><strong><em>attr</em>accessor_</strong>\t\tmakes an instance variable, access and assignment method.</p>\n<p><strong><em>a</em>**</strong><em>ttr</em>reader _** \t\tinstance variables and corresponding methods that return the value of each instance variable</p>\n<p><strong><em>attr</em>writer_</strong> \t\tcreates accessor method and allows them to be assigned</p>\n<hr>\n<h1>In Terminal</h1>\n<h2>$ ruby -v</h2>\n<p>Get the version of ruby installed</p>\n<p>E.g. ruby -v</p>\n<h2>$ irb</h2>\n<p>Start the Ruby interactive shell</p>\n<p>E.g. irb</p>\n<hr>\n<h1>YAML</h1>\n<p><a href=\"https://rhnh.net/2011/01/31/yaml-tutorial/\">https://rhnh.net/2011/01/31/yaml-tutorial/</a></p>\n<h2>Install</h2>\n<p>$gem install yaml-lint</p>\n<h2>Check a file - $ yaml-lint filename.yaml</h2>\n<p>Checks a file is correct YAML</p>\n<p>E.g. $yaml-lint filename.yaml</p>\n<h2>Check a whole folder - $ yaml-lint folder_name/</h2>\n<p>Checks a whole folder’s files are correct YAML</p>\n<p>E.g. $yaml-lint my_folder/</p>\n<hr>\n<h1>MiniTest</h1>\n<p><a href=\"https://github.com/bibstha/intro-to-ruby-minitest\">https://github.com/bibstha/intro-to-ruby-minitest</a></p>\n<h2>Install</h2>\n<p>$bundle install --path vendor/bundle</p>\n<h2>Run test on file</h2>\n<p>$bundle exec rake TEST=path<em>to</em>file</p>\n<hr>\n<h1>Gems</h1>\n<p><a href=\"https://guides.rubygems.org/make-your-own-gem/#introduction\">https://guides.rubygems.org/make-your-own-gem/#introduction</a></p>\n<h2>Basic file requirements</h2>\n<ul>\n<li>\n<p>gemname.gemspec</p>\n</li>\n<li>\n<p>Lib</p>\n<ul>\n<li>Gemname.rb</li>\n</ul>\n</li>\n</ul>\n<h2>Create gem</h2>\n<ol>\n<li>\n<p>Run $gem build gemname.gemspec - builds gem and gives you a file with a version called <strong>_gemname-0.0.0.gem _</strong>or similar</p>\n</li>\n<li>\n<p>Run $gem install ./gemname-0.0.0.gem - installs gem locally</p>\n<ol>\n<li>May need to use sudo to do this</li>\n</ol>\n</li>\n<li>\n<p>If you edit the files, then rebuild and reinstall</p>\n</li>\n<li>\n<p>If you have external dependencies, then add them to the gemspec file like this: <a href=\"https://github.com/Shopify/internal_app_engine/blob/master/internal_app.gemspec\">https://github.com/Shopify/internal<em>app</em>engine/blob/master/internal_app.gemspec</a></p>\n</li>\n<li>\n<p>Link above is also good for how to add multiple files and folders</p>\n</li>\n</ol>\n<h2>Adding to RubyGems.org</h2>\n<p>You need to have a verified account with rubygems.org. Once your gem is ready:</p>\n<ol>\n<li>\n<p>Run $gem push gemname-0.0.0.gem</p>\n</li>\n<li>\n<p>You may need to login to your account during this</p>\n</li>\n</ol>\n<p>Also, you can download your credentials by going to <a href=\"https://rubygems.org/api/v1/api_key.yaml\">https://rubygems.org/api/v1/api_key.yaml</a> and logging in. You then save the .yml file as <strong><em>credentials.yml</em></strong> in <strong><em>~/.gem</em></strong></p>\n<h2>List gems</h2>\n<ol>\n<li>Run $gem list to see all gems and their installed versions</li>\n</ol>\n<h2>Uninstall a gem</h2>\n<ol start=\"2\">\n<li>\n<p>Run $gem uninstall gemname </p>\n<ol>\n<li>\n<p>If multiple versions, you will get a prompt to ask which or all versions to uninstall</p>\n</li>\n<li>\n<p>May need to use sudo to do this</p>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h1>CLI-Kit</h1>\n<p><a href=\"https://github.com/Shopify/cli-kit\">https://github.com/Shopify/cli-kit</a></p>\n<h2>Install</h2>\n<p>$gem install cli-kit</p>\n<h2>Create project</h2>\n<p>$cli-kit new myproject -> choose Bundler</p>\n<h2>Install dependencies</h2>\n<p>$bundle install</p>\n<h2>Run application command</h2>\n<p>Cd to <strong><em>myproject</em></strong> folder and run $./exe/myproject</p>\n<h2>Add commands</h2>\n<p><a href=\"https://github.com/Shopify/cli-kit\">https://github.com/Shopify/cli-kit</a></p>\n<h2>Add UI elements to make it prettier :)</h2>\n<p><a href=\"https://github.com/Shopify/cli-ui\">https://github.com/Shopify/cli-ui</a></p>\n<h2>When adding to an existing project</h2>\n<ol>\n<li>Modify the Gemfile and add in </li>\n</ol>\n<p>gem 'cli-kit', '~> 3.1.0'</p>\n<p>gem 'cli-ui', '~> 1.1.4'</p>\n<p>group :test do</p>\n<p>  gem 'mocha', '~> 1.5.0', require: false</p>\n<p>  gem 'minitest', '>= 5.0.0', require: false</p>\n<p>  gem 'minitest-reporters', require: false</p>\n<p>end</p>\n<ol start=\"2\">\n<li>\n<p>Run $bundle install to install new dependencies</p>\n</li>\n<li>\n<p>Run $dev up to check bundler and ruby versions</p>\n</li>\n<li>\n<p>Run $cli-kit new myproject -> this will create a <strong><em>myproject</em></strong> folder containing all the CLI files.</p>\n</li>\n<li>\n<p>If you wish, you can move the folder within <strong><em>myproject/lib</em></strong> up to the main <strong><em>/lib</em></strong> folder - the paths are relative and will keep working</p>\n<ol>\n<li>Move the <strong><em>lib/myproject</em></strong> directory and <strong><em>lib/myproject.rb</em></strong> file</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h1>Byebug</h1>\n<p><a href=\"https://github.com/deivid-rodriguez/byebug/blob/master/GUIDE.md\">https://github.com/deivid-rodriguez/byebug/blob/master/GUIDE.md</a> - command list near bottom of page</p>\n<h2>$ require 'byebug'</h2>\n<p>Use the byebug object when running your code. This allows you to insert \"byebug\" in your code wherever you want it to break</p>\n<p>E.g. require 'byebug'</p>\n<h2>$ byebug <em>filename.rb</em></h2>\n<p>Starts byebug on your file, if you don’t want to put ‘byebug\" in the code</p>\n<p>E.g. byebug filename.rb</p>\n<h2>$ step</h2>\n<p>Steps through an iteration of code</p>\n<p>E.g. step</p>\n<h2>$ <em>var_name</em></h2>\n<p>Displays a variables value</p>\n<p>E.g. <em>var_name</em></p>\n<h2>$ display <em>var_name</em></h2>\n<p>Displays a variables value as you step through</p>\n<p>E.g. display <em>var_name</em></p>\n<h2>$ undisplay *var_name *or undisplay 3</h2>\n<p>Undisplays the variables you step through</p>\n<p>E.g. undisplay <em>var_name</em></p>\n<h2>$ break 5</h2>\n<p>Create a breakpoint at line 5 of the code</p>\n<p>E.g. break 5</p>\n<h2>$ continue</h2>\n<p>Continue after a breakpoint</p>\n<p>E.g. continue</p>\n<h2>$ set linetrace</h2>\n<p>Turns on line tracing so you can see which lines of code are being executed</p>\n<p>E.g. set linetrace</p>\n<h2>$ set basename</h2>\n<p>Stops the full filename path being displayed, just the filename shows</p>\n<p>E.g. set basename</p>\n<h2>$ eval <em>var_name</em></h2>\n<p>Displays the value of a variable</p>\n<p>E.g. eval var_name</p>\n<h2>$ private_methods</h2>\n<p>Show available private methods</p>\n<p>E.g. private_methods</p>\n<p>Check if private method included</p>\n<p>E.g. private_methods.member?(:hanoi) # => true / false</p>\n<hr>\n<h1>In Ruby</h1>\n<h2>puts</h2>\n<p>Converts to string and print something out, returns nil</p>\n<p>E.g. puts \"Hi there!\"</p>\n<h2>p</h2>\n<p>Print something out, keeps type intact returns value</p>\n<p>E.g. p \"Hi there!\"</p>\n<h2>Random Number</h2>\n<p>rand (optional)</p>\n<p>Returns int between 0 and your argument, if not argument returns float between 0 and 1</p>\n<p>E.g. rand(100)</p>\n<p>E.g. rand</p>\n<h2>Replace</h2>\n<p>String Replace of 1st or all instances</p>\n<p>E.g. \"Adrian\".sub(“A”, “”)</p>\n<p>E.g. \"Igloo\".gsub(“o”, “”)</p>\n<h2>Substring (comma, length)</h2>\n<p>No substring method, uses commas and length</p>\n<p>E.g. # Get substring at index 1 with length 3.</p>\n<h1>... First argument is start index, second is length.</h1>\n<p>last_three = value(1,3)</p>\n<p>E.g. # Get substring at index 1 with length 2.</p>\n<p>middle_two = value(1,2)</p>\n<p>E.g. # Get substring from characters at end of string</p>\n<p>last_two = value(-2)</p>\n<h2>Substring (ranges and expressions)</h2>\n<p>No substring method, uses ranges and expressions</p>\n<p>E.g. # Get substring at indexes 0 through 3.</p>\n<h1>... This is the first four characters.</h1>\n<p>first_part = value[0..3]</p>\n<p>E.g. # Get substring at indexes 3 through 4.</p>\n<h1>... This is the character at index 3.</h1>\n<p>second_part = value[2..3]</p>\n<p>E.g. # Get substring past index three through end of string.</p>\n<p>last_part = value[3..-1]</p>\n<h2>Strip (whitespace before and after string)</h2>\n<p>Removes whitespace before and after string</p>\n<p>E.g. string.strip</p>\n<h2>Single line comment</h2>\n<p>Use #</p>\n<p>E.g. # my single comment</p>\n<h2>Multi line comment</h2>\n<p>Use =begin and =end</p>\n<p>E.g. </p>\n<p>=begin </p>\n<p>my first line comment</p>\n<p>my second line comment</p>\n<p>=end</p>\n<h2>Looping: do</h2>\n<p>Use do, end, break, break if</p>\n<p>loop do</p>\n<p>  monk.meditate</p>\n<p>  break if monk.nirvana?</p>\n<p>end</p>\n<h2>Looping: times (only on FixNum class)</h2>\n<p>Use .times to set how many times to do something</p>\n<p>n.times do</p>\n<h1>do something</h1>\n<p>end</p>\n<p>or</p>\n<p>1.upto(10){ |k| puts \"Number #{k}\"}</p>\n<p>or</p>\n<p>10.downto(5){ |k| puts \"Number #{k}\"}</p>\n<h2>Looping: for</h2>\n<p>Use for loop for more control</p>\n<p>for num in 1..100</p>\n<p>   puts num</p>\n<p>End</p>\n<p>or</p>\n<p>for num in 1..100 do</p>\n<p>   puts \"Hello world, this is number #{num}\"</p>\n<p>end</p>\n<h2>Looping: while</h2>\n<p>Use a while loop to keep going unless a certain condition is met</p>\n<p>x = 100</p>\n<p>while x > 0            </p>\n<p>   x -= 1</p>\n<p>   puts \"This loop will run #{x} more times\"</p>\n<p>end</p>\n<p>or</p>\n<p>x = 100               </p>\n<p>puts \"This loop will run #{x -= 1} more times\" while x > 0</p>\n<h2>Looping: .each</h2>\n<p>Use a .each in Ruby, it’s preferred and will work on arrays</p>\n<p>(1..100).each do |k|</p>\n<p>   puts \"#{k}. This is Ruby preferred way of doing loops, when possible\"</p>\n<p>end                  </p>\n<p>or</p>\n<p>(1..100).each{ |k| puts \"#{k}. Curly braces make it even shorter\"}</p>\n<h2>Array &#x26; Hash looping</h2>\n<p>.each do |item|</p>\n<p>  <em>Code</em></p>\n<p>end</p>\n<p>E.g. </p>\n<p>array.each do |item|</p>\n<p>  puts \"The current array item is: #{item}\"</p>\n<p>end</p>\n<h2>Array &#x26; Hash looping</h2>\n<p>.each_pair do |key, value|</p>\n<p>  <em>Code</em></p>\n<p>end</p>\n<p>E.g. </p>\n<p>array.each_pair do |key, value|</p>\n<p>  puts \"The #{key} is #{value}\"</p>\n<p>end</p>\n<h2>Hash looping</h2>\n<p>.each_key do |key|</p>\n<p>  <em>Code</em></p>\n<p>end</p>\n<p>E.g. </p>\n<p>hash.each_key do |key|</p>\n<p>  puts \"The key is #{key}\"</p>\n<p>end</p>\n<h2>Hash looping</h2>\n<p>.each_value do |value|</p>\n<p>  <em>Code</em></p>\n<p>end</p>\n<p>E.g. </p>\n<p>hash.each_value do |value|</p>\n<p>  puts \"The value is #{value}\"</p>\n<p>end</p>\n<h2>Hash getting value</h2>\n<p>Use fetch as it returns either a value when the key is found or a default value if nothing in the hash at that key</p>\n<p>.fetch(key, default<em>return</em>value)</p>\n<p>  <em>Code</em></p>\n<p>end</p>\n<p>E.g. </p>\n<p>hash.fetch(key, value)</p>\n<p>  puts \"Nothing found at #{key}, therefore #{value}\"</p>\n<p>End</p>\n<p>or</p>\n<p>hsh[letter] = hsh.fetch(letter,0) + 1</p>\n<h2>Array &#x26; Hash sorting</h2>\n<p>Use .sort and .reverse for simple numerical and alphabetical sorting. Use .sort_by for complex or multi-dimensional sorting</p>\n<p>E.g. </p>\n<p>tasks.sort<em>by{ |t| t.due</em>date }  </p>\n<p>or </p>\n<p>tasks.sort<em>by(&#x26;:due</em>date)  </p>\n<p>or (multi array)</p>\n<p>tasks.sort<em>by{ |t| [t.due</em>date, t.priority] }  </p>\n<p>presidents.sort<em>by{ |hsh| hsh[:last</em>name] }.reverse</p>\n<p>frequencies = frequencies.sort<em>by {|word, num</em>times| num_times }</p>\n<h2>Regular Expressions</h2>\n<p>Use .match and .scan - .match returns first instance with match in array key [0] and each () matched group in following array elements. .scan returns all matched instances in an array</p>\n<p>E.g. .match</p>\n<p>regex = /^(\\w<em>) \\w</em> (\\d<em>) (.</em>)/</p>\n<p>string = \"ebu inc 626 if iq &#x3C; 0\"</p>\n<p>mtch = string.match(regex)</p>\n<p>puts \"Matched: \" + mtch</p>\n<p>puts \"Matched the variable: #{mtch[1]}, the number #{mtch[2]}, and the expression #{mtch[3]}\"</p>\n<p>E.g. .scan</p>\n<p>locations = 'Alabama, AL, Alaska, AK, Arizona, AZ, Arkansas, AR, California, CA, Colorado, CO, Connecticut, CT, Delaware, DE, Florida, FL, Georgia, GA, South Dakota, SD'</p>\n<p>puts locations.scan(/[A-Z]{2}/).join(', ')</p>\n<h1>=> AL, AK, AZ, AR, CA, CO, CT, DE, FL, GA, SD</h1>\n<h2>Open a url and read to variable</h2>\n<p>require \"open-uri\"</p>\n<p>open and read, open will follow redirects and also has the base_uri property for whatever it finally opened</p>\n<p>E.g. </p>\n<p>require \"open-uri\"</p>\n<p>page = open(url).read</p>\n<p>puts page.base_uri</p>\n<h2>Open a file and read, write, close</h2>\n<p>Open with \"w\", read, write, close - “File” is not required but good for readability</p>\n<p>E.g. </p>\n<p>local_file = File.open(\"tweets-on-hard-drive.xml\", \"w\")</p>\n<p>tweets = remote_page.read</p>\n<p>local_file.write(tweets)</p>\n<p>local_file.close</p>\n<h2>Test if something exists</h2>\n<p>The nil value is the same as null in javascript</p>\n<p>E.g. </p>\n<p>value.nil?</p>\n<h2>Check class</h2>\n<p>Use is_ for various class types</p>\n<p>E.g. </p>\n<p>Value.is_a \t\t\t//\tprint the class</p>\n<p>Value.is_a? == FixNum \t//\tis this an integer?</p>\n<p>Value.is_a? == Float \t\t//\tis this a float?</p>\n<p>Value.is_a? == String \t//\tis this a string?</p>\n<p>puts \"That's not an integer.\" unless n.is_a? Integer</p>\n<h2>Change class</h2>\n<p>Use to_ for various class types</p>\n<p>E.g. </p>\n<p>value.to_i\t//\tchange to integer</p>\n<p>value.to_s\t//\tchange to string</p>\n<p>value.to_f\t//\tchange to float</p>\n<p>value.to_a\t//\tchange to array</p>\n<h2>Load a YAML file</h2>\n<p>Load the contents of a YAML file into a variable</p>\n<p>E.g. </p>\n<p>require 'yaml'</p>\n<p>data = YAML.load_file(\"data.yaml\")</p>\n<p>Save to a YAML file</p>\n<p>Save the contents of an array to a YAML file</p>\n<p>E.g. </p>\n<p>require 'yaml'</p>\n<p>data = {\"name\" => \"Xavier\"}</p>\n<p>File.open(\"path/to/output.yml\", \"w\") {|f| f.write(data.to_yaml) }</p>\n<hr>\n<h1>References</h1>\n<h2>All Contents</h2>\n<p><a href=\"http://ruby.bastardsbook.com/toc/\">http://ruby.bastardsbook.com/toc/</a></p>\n<h2>Numbers</h2>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/numbers/\">http://ruby.bastardsbook.com/chapters/numbers/</a></p>\n<h2>Strings</h2>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/strings/\">http://ruby.bastardsbook.com/chapters/strings/</a></p>\n<h2>Arrays (Collections)</h2>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/collections/\">http://ruby.bastardsbook.com/chapters/collections/</a></p>\n<h2>Methods</h2>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/methods/\">http://ruby.bastardsbook.com/chapters/methods/</a></p>\n<p>Control: if / else</p>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/ifelse/\">http://ruby.bastardsbook.com/chapters/ifelse/</a></p>\n<p>Control: loops</p>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/loops/\">http://ruby.bastardsbook.com/chapters/loops/</a></p>\n<h2>Regular Expressions</h2>\n<p><a href=\"http://ruby.bastardsbook.com/chapters/regexes/\">http://ruby.bastardsbook.com/chapters/regexes/</a></p>\n<p><a href=\"http://rubular.com/\">http://rubular.com/</a></p>\n<p><a href=\"https://www.regular-expressions.info/\">https://www.regular-expressions.info/</a></p>\n<h2>Byebug</h2>\n<p><a href=\"https://github.com/deivid-rodriguez/byebug/blob/master/GUIDE.md\">https://github.com/deivid-rodriguez/byebug/blob/master/GUIDE.md</a></p>\n<h2>YAML</h2>\n<pre><code>[https://rhnh.net/2011/01/31/yaml-tutorial/](https://rhnh.net/2011/01/31/yaml-tutorial/)\n</code></pre>","frontmatter":{"title":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ruby-commands-and-code/"}}